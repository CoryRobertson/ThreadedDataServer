plugins {
    id 'java'
    id 'application'
}

group 'com.github.coryrobertson'
version '1.0-SNAPSHOT'

mainClassName = 'com.github.coryrobertson.ThreadedDataServer.Server.ThreadedDataServer'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.takes:takes:1.19'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'

}

test {
    useJUnitPlatform()
}

tasks.withType(Tar){
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(Zip){
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task DataServerClient(type: Jar)
{
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    mainClassName = 'com.github.coryrobertson.ThreadedDataServer.Client.ThreadedDataServerClient'
    manifest
            {
                attributes 'Main-Class' : "com.github.coryrobertson.ThreadedDataServer.Client.ThreadedDataServerClient"
            }

    from sourceSets.main.output
    baseName = 'DataServerClient'
}

task DataServerServer(type: Jar)
{
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    mainClassName = 'com.github.coryrobertson.ThreadedDataServer.Server.ThreadedDataServer'
    manifest
            {
                attributes 'Main-Class' : "com.github.coryrobertson.ThreadedDataServer.Server.ThreadedDataServer"
            }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    from sourceSets.main.output
    baseName = 'DataServerServer'
}

task DataServerServerStartScript(type: CreateStartScripts)
{
    outputDir = file('build/scripts/')
    mainClass = 'com.github.coryrobertson.ThreadedDataServer.Server.ThreadedDataServer'
    applicationName = 'StartThreadedDataServerServer'
    classpath = files('libs/' + DataServerServer.archiveFileName.get())
}

task DataServerClientStartScript(type: CreateStartScripts)
{
    outputDir = file('build/scripts/')
    mainClass = 'com.github.coryrobertson.ThreadedDataServer.Client.ThreadedDataServerClient'
    applicationName = 'StartThreadedDataServerClient'
    classpath = files('libs/' + DataServerClient.archiveFileName.get())
}

jar.dependsOn DataServerClient
jar.dependsOn DataServerServer

distributions
        {
            main
                    {
                        contents
                                {
                                    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
                                    from (DataServerServer) {into 'lib'}
                                    from (DataServerClient) {into 'lib'}
                                    from (DataServerClientStartScript) {into 'bin'}
                                    from (DataServerServerStartScript) {into 'bin'}
                                }
                    }
        }